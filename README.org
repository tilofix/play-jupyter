# -*- coding: utf-8-unix -*-
#+TITLE: Playground to learn and understand Jupyter Notebooks

** IP[y]: IPython Interactive Computing

Recently I started to learn Python-Tricks (in German)
and remembered IPython and its Notebook facility 
and check if I can use it to make notes on Python-Tricks.

In meantime all python language-agnostic components 
are moved from IPython to Jupyter.

"IPython 3.x was the last monolithic release of IPython, 
containing the notebook server, qtconsole, etc. 
As of IPython 4.0, the language-agnostic parts of the project: 
the notebook format, message protocol, qtconsole, notebook web application, etc. 
have moved to new projects under the name [[https://jupyter.org/][Jupyter]]. 
IPython itself is focused on interactive Python, 
part of which is providing a Python kernel for Jupyter."

You can get good old IPython when executing a ~jupyter console~
instead of a ~jupyter notebook~ ;-).

** Learning about Jupyter Notebook
- This blog entry refers to a text book:
  https://blog.jupyter.org/teaching-and-learning-with-jupyter-c1d965f7b93a
- A text book: 
  https://www.packtpub.com/big-data-and-business-intelligence/learning-jupyter
- And the [[https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks][A gallery of interesting Jupyter Notebooks]] 
  which are to be displayed by [[https://nbviewer.jupyter.org/][NBViewer]].
- The Notebook Help displayed by nbviewer:
  https://nbviewer.jupyter.org/github/ipython/ipython/blob/3.x/examples/Notebook/Index.ipynb
- [[http://jupyterlab.readthedocs.io/en/stable/][JupyterLab]] is the next-generation user interface 
  for [[https://jupyter.org/][Project Jupyter]] offering all the familiar building blocks 
  of the classic Jupyter Notebook in a flexible and powerful user interface. 
  JupyterLab will eventually replace the classic Jupyter Notebook.
- [[https://mybinder.readthedocs.io/en/latest/][Binder]] is the notbook execution environment,
  which not only supports executing Jupyter Notebooks powered by it's core kernels 
  for programming languages such as Ju(Julia)-pyt(Python)-er(R) but also for R(ust :).
  See binder's documentation headline [[https://mybinder.readthedocs.io/en/latest/howto/languages.html?highlight=multi#using-multiple-languages-at-once][Using multiple languages at once]].
  - Python :: your environment will have Python (and specified dependencies) installed 
    when you use one of the following configuration files:
    - =requirements.txt=; utilized by ~pip~
    - =environment.yml=; utilized by ~conda~
  - R :: you must specify a version of R in a =runtime.txt= file. 
  - Julia :: include a configuration file called =Project.toml=. 

** Off-topic: Learning GIT by doing "[[https://alexwlchan.net/a-plumbers-guide-to-git/][A Plumber’s Guide to Git]]" and "man git-push"

Note: this would be better belong to repository =play-git=,
but I wasn't not able to reproduce the same situation having two
different root-commits create by ~GitHub~ remotely, and locally by ~git
init~. And the example hashes of ~commit~ and ~tree~ objects
belong to this repo.

I initialized the local git repository and did 2 commits
?and created a repository on Adtran's github and did 1 commit.
After I tried to synchronize my local with remote repository 
I ended up in an fatal error:

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git pull adtran 
  warning: keine gemeinsamen Commits
  remote: Enumerating objects: 3, done.        
  remote: Counting objects: 100% (3/3), done.        
  remote: Compressing objects: 100% (2/2), done.        
  remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0        
  Entpacke Objekte: 100% (3/3), Fertig.
  Von github.adtran.com:twirkner/play-jupyter
   ,* [neuer Branch]    master     -> adtran/master
  Sie führten "pull" von Remote-Repository 'adtran' aus, ohne einen
  Branch anzugeben. Da das nicht das konfigurierte Standard-Remote-
  Repository für den aktuellen Branch ist, müssen Sie einen Branch auf
  der Befehlszeile angeben.
  56S8TZ1[play-jupyter]$ git pull adtran master
  Von github.adtran.com:twirkner/play-jupyter
   ,* branch            master     -> FETCH_HEAD
  fatal: Verweigere den Merge von nicht zusammenhängenden Historien.
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git push adtran master
  To github.adtran.com:twirkner/play-jupyter.git
   ! [rejected]        master -> master (non-fast-forward)
  error: Fehler beim Versenden einiger Referenzen nach 'git@github.adtran.com:twirkner/play-jupyter.git'
  Hinweis: Aktualisierungen wurden zurückgewiesen, weil die Spitze Ihres aktuellen
  Hinweis: Branches hinter seinem externen Gegenstück zurückgefallen ist. Führen Sie
  Hinweis: die externen Änderungen zusammen (z. B. 'git pull ...') bevor Sie "push"
  Hinweis: erneut ausführen.
  Hinweis: Siehe auch die Sektion 'Note about fast-forwards' in 'git push --help'
  Hinweis: für weitere Details.
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

My two ~git init~ calls - one on github - lead to two root commits
being ~6a0fc90~ as well as ~ec32c54~:
- refs
  - =$ cat .git/refs/heads/master= 
    c49dbd12c30126fd711390f1b8dd8ee712a78b34
  - =$ cat .git/refs/remotes/adtran/master=
    ec32c5429d67e71de38cebcd720f23e6aae199e8
- commit objects
  - (is a root commit, has no parent) =$ git cat-file -p 6a0fc90cf9c5152cfb452a42f9bb3efc9dae9176=
    - tree c7bfd0fc492f13509954a5018e701ccf4783e90e
      - =$ git cat-file -p c7bfd0fc492f13509954a5018e701ccf4783e90e=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 561b881505065ada9f3124bb4268232bcf336c19	python3_notes.ipynb
          #+END_EXAMPLE
    - author Tilo Wirkner <tilo.wirkner@adtran.com> 1553258993 +0100
    - committer Tilo Wirkner <tilo.wirkner@adtran.com> 1553258993 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Initial commit of new project
        
        Playground to learn and understand Jupyter Notebooks
      #+END_EXAMPLE
  - =$ git cat-file -p c49dbd12c30126fd711390f1b8dd8ee712a78b34=
    - tree d449f244dae6c29f26704dfb6098e3d4ea6e3112
      - =$ git cat-file -p d449f244dae6c29f26704dfb6098e3d4ea6e3112=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 894a44cc066a027465cd26d634948d56d13af9af	.gitignore
            100644 blob 2530266a36a8b2e18003b65797cee0f9c4bd60bb	Pipfile
            100644 blob 55eb3e5fdeeb609a0848da7975b26ac1a86a6bd7	Pipfile.lock
            100644 blob ac93b4b55546e714ab1feb414e4e14d5bb2e488a	README.org
            100644 blob 561b881505065ada9f3124bb4268232bcf336c19	python3_notes.ipynb
            100644 blob cee5e58443d3bd60769a48d731921ed50adb581c	python_tricks.ipynb
            100644 blob 3224ceb843bc7c13269b27d228cfb94aa978a70c	requirements.txt
            100644 blob 7ecbe2956dc100d3b29bcabe84f6702ae55fcd72	textfile.txt
          #+END_EXAMPLE
    - parent 6a0fc90cf9c5152cfb452a42f9bb3efc9dae9176
    - author Tilo Wirkner <tilo.wirkner@adtran.com> 1553259039 +0100
    - committer Tilo Wirkner <tilo.wirkner@adtran.com> 1553259039 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Supplement to the initial commit - missed to mark all files :-O
      #+END_EXAMPLE
  - (is a root commit, has not paren) =$ git cat-file -p ec32c5429d67e71de38cebcd720f23e6aae199e8=
    - tree 90a01769a94b92239d70f8d1fe46eea48d3aa446
      - =$ git cat-file -p 90a01769a94b92239d70f8d1fe46eea48d3aa446=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 894a44cc066a027465cd26d634948d56d13af9af	.gitignore
          #+END_EXAMPLE
    - author TILO WIRKNER <TILO.WIRKNER@adtran.com> 1553257717 +0100
    - committer GitHub Enterprise <github-noreply@adtran.com> 1553257717 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Initial commit
      #+END_EXAMPLE

The issue is explained in "NOTE ABOUT FAST-FORWARDS" 
in manual page of [[https://manpages.debian.org/bullseye/git-man/git-push.1.en.html][git-push]].

#+BEGIN_EXAMPLE
  In contrast, a non-fast-forward update will lose history. For example, suppose you and somebody else
  started at the same commit X, and you built a history leading to commit B while the other person built a
  history leading to commit A. The history looks like this:

            B
           /
       ---X---A

  Further suppose that the other person already pushed changes leading to A back to the original repository
  from which you two obtained the original commit X.

  The push done by the other person updated the branch that used to point at commit X to point at commit A.
  It is a fast-forward.

  But if you try to push, you will attempt to update the branch (that now points at A) with commit B. This
  does not fast-forward. If you did so, the changes introduced by commit A will be lost, because everybody
  will now start building on top of B.

  The command by default does not allow an update that is not a fast-forward to prevent such loss of
  history.

  If you do not want to lose your work (history from X to B) or the work by the other person (history from
  X to A), you would need to first fetch the history from the repository, create a history that contains
  changes done by both parties, and push the result back.

  You can perform "git pull", resolve potential conflicts, and "git push" the result. A "git pull" will
  create a merge commit C between commits A and B.

            B---C
           /   /
       ---X---A

  Updating A with the resulting merge commit will fast-forward and your push will be accepted.

  Alternatively, you can rebase your change between X and B on top of A, with "git pull --rebase", and push
  the result back. The rebase will create a new commit D that builds the change between X and B on top of
  A.

            B   D
           /   /
       ---X---A

  Again, updating A with this commit will fast-forward and your push will be accepted.
#+END_EXAMPLE

Ok, let's go ... Upps

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git pull --rebase adtran master
  error: Pull mit Rebase nicht möglich: Sie haben Änderungen, die nicht zum Commit vorgemerkt sind.
  error: Bitte committen Sie die Änderungen oder benutzen Sie "stash".
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git status
  Auf Branch master
  Änderungen, die nicht zum Commit vorgemerkt sind:
    (benutzen Sie "git add <Datei>...", um die Änderungen zum Commit vorzumerken)
    (benutzen Sie "git checkout -- <Datei>...", um die Änderungen im Arbeitsverzeichnis zu verwerfen)

          geändert:       README.org

  keine Änderungen zum Commit vorgemerkt (benutzen Sie "git add" und/oder "git commit -a")
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

I changed the file I writing in ... let's stash it away and do the rebase. 

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git stash push
  Saved working directory and index state WIP on master: c49dbd1 Supplement to the initial commit - missed to mark all files :-O
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$git pull --rebase adtran master
  Von github.adtran.com:twirkner/play-jupyter
   ,* branch            master     -> FETCH_HEAD
  First, rewinding head to replay your work on top of it...
  Wende an: Initial commit of new project
  Wende an: Supplement to the initial commit - missed to mark all files :-O
  Verwende Informationen aus der Staging-Area, um ein Basisverzeichnis nachzustellen ...
  .git/rebase-apply/patch:537: trailing whitespace.
  and remembered IPython and its Notebook facility 
  .git/rebase-apply/patch:540: trailing whitespace.
  In meantime all python language-agnostic components 
  .git/rebase-apply/patch:543: trailing whitespace.
  "IPython 3.x was the last monolithic release of IPython, 
  .git/rebase-apply/patch:544: trailing whitespace.
  containing the notebook server, qtconsole, etc. 
  .git/rebase-apply/patch:545: trailing whitespace.
  As of IPython 4.0, the language-agnostic parts of the project: 
  warning: unterdrückte 18 Whitespace-Fehler
  warning: 23 Zeilen fügen Whitespace-Fehler hinzu.
  Falle zurück zum Patchen der Basis und zum 3-Wege-Merge ...
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git status
  Auf Branch master
  nichts zu committen, Arbeitsverzeichnis unverändert
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git push adtran master
  Zähle Objekte: 11, Fertig.
  Delta compression using up to 4 threads.
  Komprimiere Objekte: 100% (10/10), Fertig.
  Schreibe Objekte: 100% (11/11), 10.99 KiB | 2.75 MiB/s, Fertig.
  Total 11 (delta 0), reused 0 (delta 0)
  To github.adtran.com:twirkner/play-jupyter.git
     ec32c54..c88be29  master -> master
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git stash pop
  Auf Branch master
  Änderungen, die nicht zum Commit vorgemerkt sind:
    (benutzen Sie "git add <Datei>...", um die Änderungen zum Commit vorzumerken)
    (benutzen Sie "git checkout -- <Datei>...", um die Änderungen im Arbeitsverzeichnis zu verwerfen)

          geändert:       README.org

  keine Änderungen zum Commit vorgemerkt (benutzen Sie "git add" und/oder "git commit -a")
  Dropped refs/stash@{0} (8f8e986c4285eb21374246e4327c2a5ccbef91fc)
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

OK, we are back on track :-).

*** Post Scriptum for Learning GIT by doing "[[https://alexwlchan.net/a-plumbers-guide-to-git/][A Plumber’s Guide to Git]]" 

The plumber's guide did not explain why I get different hash values 
when ~git~ creates SHA1 value and when ~sha1sum~ creates SHA1.

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git hash-object python3_notes.ipynb 
  561b881505065ada9f3124bb4268232bcf336c19
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ sha1sum.exe python3_notes.ipynb 
  edcbcd188a8e3bd1e18e125d79670fbbcf02e1bf *python3_notes.ipynb
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

I found answer in this stackoverflow thread:
[[https://stackoverflow.com/questions/5290444/why-does-git-hash-object-return-a-different-hash-than-openssl-sha1#5290484][Why does git hash-object return a different hash than openssl sha1?]]

#+BEGIN_QUOTE
You see a difference because git hash-object doesn't just take a hash of the bytes in the file - 
it prepends the string "blob " followed by the file size and a NUL to the file's contents before hashing. 
There are more details in this other answer on Stack Overflow:
[[https://stackoverflow.com/questions/552659/how-to-assign-a-git-sha1s-to-a-file-without-git/552725#552725][How to assign a Git SHA1's to a file without Git?]]
#+END_QUOTE

Let's verify with help of ~stat~ to get size of the file in question.

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ stat --format %s python3_notes.ipynb 
  4634
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ printf 'blob 4634\0' | cat - python3_notes.ipynb | sha1sum.exe -
  561b881505065ada9f3124bb4268232bcf336c19 *-
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

So ~git~ prepends a type/length field to the data it has to hash.

Finally, let's check where this plumbing technique is documented.

Yes, it is documented in "Pro Git" book's chapter [[https://git-scm.com/book/en/v2/Git-Internals-Git-Objects][10.2 Git Objects]]
under headline "Object Storage" at the end: 
"... there is a header stored with every object you commit to your Git object database."
"... Git first constructs a header which starts by identifying the type of object ... 
To that first part of the header, Git adds a space followed by the size in bytes of the content, 
and adding a final null byte".



