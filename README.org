# -*- coding: utf-8-unix -*-
#+TITLE: Playground to learn and understand Jupyter Notebooks

** IP[y]: IPython Interactive Computing

Recently I started to learn Python-Tricks (in German)
and remembered IPython and its Notebook facility 
and check if I can use it to make notes on Python-Tricks.

In meantime all python language-agnostic components 
are moved from IPython to Jupyter.

"IPython 3.x was the last monolithic release of IPython, 
containing the notebook server, qtconsole, etc. 
As of IPython 4.0, the language-agnostic parts of the project: 
the notebook format, message protocol, qtconsole, notebook web application, etc. 
have moved to new projects under the name [[https://jupyter.org/][Jupyter]]. 
IPython itself is focused on interactive Python, 
part of which is providing a Python kernel for Jupyter."

You can get good old IPython when executing a ~jupyter console~
instead of a ~jupyter notebook~ ;-).

** Learning about Jupyter Notebook
- This blog entry refers to a text book:
  https://blog.jupyter.org/teaching-and-learning-with-jupyter-c1d965f7b93a
- A text book: 
  https://www.packtpub.com/big-data-and-business-intelligence/learning-jupyter
- And the [[https://github.com/jupyter/jupyter/wiki/A-gallery-of-interesting-Jupyter-Notebooks][A gallery of interesting Jupyter Notebooks]] 
  which are to be displayed by [[https://nbviewer.jupyter.org/][NBViewer]].
- The Notebook Help displayed by nbviewer:
  https://nbviewer.jupyter.org/github/ipython/ipython/blob/3.x/examples/Notebook/Index.ipynb
- [[http://jupyterlab.readthedocs.io/en/stable/][JupyterLab]] is the next-generation user interface 
  for [[https://jupyter.org/][Project Jupyter]] offering all the familiar building blocks 
  of the classic Jupyter Notebook in a flexible and powerful user interface. 
  JupyterLab will eventually replace the classic Jupyter Notebook.
- [[https://mybinder.readthedocs.io/en/latest/][Binder]] is the notbook execution environment,
  which not only supports executing Jupyter Notebooks powered by it's core kernels 
  for programming languages such as Ju(Julia)-pyt(Python)-er(R) but also for R(ust :).
  See binder's documentation headline [[https://mybinder.readthedocs.io/en/latest/howto/languages.html?highlight=multi#using-multiple-languages-at-once][Using multiple languages at once]].
  - Python :: your environment will have Python (and specified dependencies) installed 
    when you use one of the following configuration files:
    - =requirements.txt=; utilized by ~pip~
    - =environment.yml=; utilized by ~conda~
  - R :: you must specify a version of R in a =runtime.txt= file. 
  - Julia :: include a configuration file called =Project.toml=. 

** Install Jupyter Notebook with Pipenv

[[https://pipenv.readthedocs.io/en/latest/][Pipenv]]: Python Dev Workflow for Humans

Pipenv is a tool that aims to bring the best of all packaging worlds 
(bundler, composer, npm, cargo, yarn, etc.) to the Python world. 
Windows is a first-class citizen, in our world.

It automatically creates and manages a virtualenv for your projects, 
as well as adds/removes packages from your Pipfile as you install/uninstall packages. 
It also generates the ever-important Pipfile.lock, 
which is used to produce deterministic builds.

Importing from requirements.txt

If you only have a requirements.txt file available when running pipenv install, 
pipenv will automatically import the contents of this file and create a Pipfile for you.

You can also specify =$ pipenv install -r path/to/requirements.txt= to import a requirements file.

Pipenv Workflow
- Clone / create project repository:
  =$ cd play-jupyter=
- Install from Pipfile, if there is one 
  or will create a Pipfile if one doesn‚Äôt exist 
  (or pipenv will automatically import the contents of requirements.txt):
  =pipenv install --three=
- Or, add a package to your new project:
  =$ pipenv install <package>=
- Next, activate the Pipenv shell:
  =$ pipenv shell=

#+BEGIN_EXAMPLE
  pipenv install --three
  pipenv run pip list
#+END_EXAMPLE

Let's see how PIP 

#+BEGIN_SRC shell :tangle no
  pipenv --where
  pipenv --venv
  pipenv --py
#+END_SRC 

** Run a Jupyter Notebook with Pipenv

Run a Jupyter notebook and open displayed URL in browser 
(does not open automatically as we are running cygwin). 

#+BEGIN_EXAMPLE
  pipenv run jupyter-notebook
#+END_EXAMPLE

As long as shell is controlled by Emacs you may open 
the displayed URL by mark the URL and type M+x '[[help:browse-url][browse-url]]'.

** Install Jupyter (Qt)Console with Pipenv

Even though jupyter-console seems to be installed with jupyter,
I could neither start ~jupyter console~ nor ~jupyter qtconsole~:
#+BEGIN_EXAMPLE
[tilo@holm play-jupyter]$ 
[tilo@holm play-jupyter]$ pipenv run jupyter console
Jupyter console 6.4.0

Python 3.10.1 (main, Dec 18 2021, 23:53:45) [GCC 11.1.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.0.1 -- An enhanced Interactive Python. Type '?' for help.
Traceback (most recent call last):
  File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/bin/jupyter-console", line 8, in <module>
    sys.exit(main())
...
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/jupyter_console/ptshell.py", line 664, in mainloop
    main_task = asyncio.wait(tasks, loop=loop, return_when=asyncio.FIRST_COMPLETED)
TypeError: wait() got an unexpected keyword argument 'loop'
sys:1: RuntimeWarning: coroutine 'ZMQTerminalInteractiveShell.interact' was never awaited
[tilo@holm play-jupyter]$ 
#+END_EXAMPLE

Even not after installed ~qtconsole~:
#+BEGIN_EXAMPLE
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ pipenv install qtconsole
  Installing qtconsole...
  Adding qtconsole to Pipfile's [packages]...
  ‚úî Installation Succeeded 
  Pipfile.lock (5509dc) out of date, updating to (3b5bc9)...
  Locking [dev-packages] dependencies...
  Locking [packages] dependencies...
  Building requirements...
  Resolving dependencies...
  ‚úî Success! 
  Updated Pipfile.lock (3b5bc9)!
  Installing dependencies from Pipfile.lock (3b5bc9)...
    üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 0/0 ‚Äî 00:00:00
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ pipenv run jupyter qtconsole
  Traceback (most recent call last):
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/bin/jupyter-qtconsole", line 5, in <module>
      from qtconsole.qtconsoleapp import main
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/qtconsole/qtconsoleapp.py", line 61, in <module>
      from qtpy import QtCore, QtGui, QtWidgets, QT_VERSION
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/qtpy/QtCore.py", line 42, in <module>
      from PyQt5.QtCore import *
  ModuleNotFoundError: No module named 'PyQt5'
  [tilo@holm play-jupyter]$ 
#+END_EXAMPLE

It has been required to install ~PyQt5~ manually.
#+BEGIN_EXAMPLE
  pipenv install PyQt5
#+END_EXAMPLE

** Run a Jupyter QtConsole with Pipenv

Run a Jupyter QtConsole opens a Qt-Terminal window with
good old IPython :-), or may be not the same; see my by-the-way below
on editing cells, not only when a line has a double colon.

#+BEGIN_EXAMPLE
  pipenv run jupyter qtconsole
#+END_EXAMPLE

By-The-Way: it took some hours to find the right keyboard combination
to start editing a ~cell~ rather than a ~line~
(similar to "magic" ~%<line>~ or ~%%<cell>~).
I was not able to edit more then one line when the python code has no
~:~ in a =ipython= installation of my system.

Only after I installed ~jupyter qtconsole~ I found =CTRL+ENTER= to
get start editing the next line instead of evaluate the current line.

#+BEGIN_EXAMPLE
  In [44]: cwd = !pwd          <-- TILO: Ctrl+Enter
      ...: !ls -la $cwd        <-- TILO: Enter
  ls: Zugriff auf '[/home/tilo/Projects/play-jupyter]' nicht m√∂glich: Datei oder Verzeichnis nicht gefunden

  In [45]: cwd?
  Type:        SList
  String form: ['/home/tilo/Projects/play-jupyter']
  Length:      1
  File:        ~/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/IPython/utils/text.py
  Docstring:  
  List derivative with a special access attributes.

  These are normal lists, but with the special attributes:

  ,* .l (or .list) : value as list (the list itself).
  ,* .n (or .nlstr): value as a string, joined on newlines.
  ,* .s (or .spstr): value as a string, joined on spaces.
  ,* .p (or .paths): list of path objects (requires path.py package)

  Any values which require transformations are computed only once and
  cached.

  In [46]: cwd = !pwd
      ...: !ls -la $cwd.spstr
  insgesamt 240
  drwxr-xr-x  4 tilo tilo  4096 29. Jan 16:41  .
  drwxr-xr-x 12 tilo tilo  4096 14. Jan 17:02  ..
  drwxr-xr-x  8 tilo tilo  4096 29. Jan 16:38  .git
  -rw-r--r--  1 tilo tilo  1223 12. Dez 2020   .gitignore
  drwxr-xr-x  2 tilo tilo  4096  4. Jan 2021   .ipynb_checkpoints
  -rw-r--r--  1 tilo tilo 96119 23. Jan 20:52  julia_notes.ipynb
  -rw-r--r--  1 tilo tilo   211 29. Jan 16:15  Pipfile
  -rw-r--r--  1 tilo tilo 49702 29. Jan 16:15  Pipfile.lock
  -rw-r--r--  1 tilo tilo  4995 23. Jan 20:17  python3_notes.ipynb
  -rw-r--r--  1 tilo tilo  8109 29. Jan 07:50  python_tricks.ipynb
  -rw-r--r--  1 tilo tilo 20372 29. Jan 16:41 '#README.org#'
  lrwxrwxrwx  1 tilo tilo    25 29. Jan 16:40  .#README.org -> tilo@holm.4452:1643453754
  -rw-r--r--  1 tilo tilo 20323 29. Jan 16:38  README.org
  -rw-r--r--  1 tilo tilo   489 12. Dez 2020   requirements.txt
  -rw-r--r--  1 tilo tilo  2187  4. Jan 2021   rust_notes.ipynb
  -rw-r--r--  1 tilo tilo    27 12. Dez 2020   textfile.txt

#+END_EXAMPLE

Interesting to learn more on that IPython type ~SList~.
First is says it is like a normal list but I cannot deference it's item.

#+BEGIN_EXAMPLE
  In [58]: cwd = !pwd
      ...: !ls -la $cwd[0]
  ls: Zugriff auf '[/home/tilo/Projects/play-jupyter][0]' nicht m√∂glich: Datei oder Verzeichnis nicht gefunden

#+END_EXAMPLE

The [[https://ipython.readthedocs.io/en/stable/interactive/reference.html#system-shell-access][IPython reference]] helps in chapter "Interactive use" when it talks
about "System shell access". 

-----

IPython also allows you to expand the value of python variables when
making system calls.

Wrap variables or expressions in ~{~braces~}~:
#+BEGIN_EXAMPLE
  In [60]: pyvar = 'Hello Jupyter'
      ...: !echo "A python variable: {pyvar}"
  A python variable: Hello Jupyter

  In [61]: import math
      ...: x = 8
      ...: !echo {math.factorial(x)}
  40320

#+END_EXAMPlE

For simple cases, you can alternatively prepend ~$~ to a variable name:

#+BEGIN_EXAMPLE
  In [64]: import sys
      ...: !echo $sys.argv
  [/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/ipykernel_launcher.py, -f, /home/tilo/.local/share/jupyter/runtime/kernel-6328.json]

  In [65]: !echo "A system variable: $$HOME" # Use $$ for literal $
  A system variable: /home/tilo

#+END_EXAMPlE

-----

OK, got it. Here were with my own example:
#+BEGIN_EXAMPLE
  In [56]: dir_list = ["..","."]
      ...: !ls -l {dir_list[1]}
  insgesamt 204
  -rw-r--r-- 1 tilo tilo 96119 23. Jan 20:52 julia_notes.ipynb
  -rw-r--r-- 1 tilo tilo   211 29. Jan 16:15 Pipfile
  -rw-r--r-- 1 tilo tilo 49702 29. Jan 16:15 Pipfile.lock
  -rw-r--r-- 1 tilo tilo  4995 23. Jan 20:17 python3_notes.ipynb
  -rw-r--r-- 1 tilo tilo  8109 29. Jan 07:50 python_tricks.ipynb
  -rw-r--r-- 1 tilo tilo 22539 29. Jan 17:04 README.org
  -rw-r--r-- 1 tilo tilo   489 12. Dez 2020  requirements.txt
  -rw-r--r-- 1 tilo tilo  2187  4. Jan 2021  rust_notes.ipynb
  -rw-r--r-- 1 tilo tilo    27 12. Dez 2020  textfile.txt

#+END_EXAMPLE

** Jupyter and Emacs Org Mode

There are two emacs packages worth visiting:
- EIN :: "The Emacs IPython Notebook (EIN) package provides a Jupyter
  Notebook client and integrated REPL (like SLIME) in Emacs."
  Documentation: http://millejoh.github.io/emacs-ipython-notebook/
- emacs-jupyter :: "Provides REPL and ~org-mode~ source block
  frontends to Jupyter kernels."

** Make Play Jupyter a Binder-ready Repo with repo2docker

[[https://mybinder.readthedocs.io/en/latest/config_files.html][Configuration Files]]

As explained in the [[https://repo2docker.readthedocs.io/en/latest/usage.html#usage-config-file-location][repo2docker documentation]], the configuration files can be placed in:
- A folder named ~binder/~ in the root of the repository.
- A folder named ~.binder/~ in the root of the repository.
- The root directory of the repository.

A number of repo2docker configuration files can be combined to compose more complex setups.

*** Calling repo2docker

repo2docker is called with this command:
=jupyter-repo2docker <Source-Repository> --image-name <Image-Name>=

where <Source-Repository> is:
- a URL of a Git repository (https://github.com/binder-examples/requirements),
- a Zenodo DOI (10.5281/zenodo.1211089),
- a SWHID (swh:1:rev:999dd06c7f679a2714dfe5199bdca09522a29649), or
- a path to a local directory (a/local/directory)

of the source repository you want to build.

For example, the following command will build an image of Peter Norvig‚Äôs Pytudes repository:

~jupyter-repo2docker https://github.com/norvig/pytudes~

Building the image may take a few minutes.

*** Sample Binder Repositories

The [[https://github.com/binder-examples][binder examples]] organization on GitHub contains a list of sample
repositories for common configurations that ~repo2docker~ can build with
various configuration files such as Python and R installation in a
repository.

[[https://mybinder.readthedocs.io/en/latest/examples/sample_repos.html?highlight=multi-language#managing-languages][Managing languages]] is a comprehnsive overview of utilizing binder.

Multi-language demo is a demo showing how you can intermingle Python, R, Rust, Fortran, Cython, C.

You can try it :
- [[https://mybinder.org/v2/gh/binder-examples/multi-language-demo/master][launch Binder]]
- [[https://github.com/binder-examples/multi-language-demo][Github repo]]

And read the accompanying [[https://blog.jupyter.org/i-python-you-r-we-julia-baf064ca1fb6][blog post]].

*** Project.toml - Install a Julia environment

A Project.toml (or JuliaProject.toml) file can specify both the
version of Julia to be used and a list of Julia packages to be
installed. If a Manifest.toml is present, it will determine the exact
versions of the Julia packages that are installed.

*** requirements.txt - Install a Python environment

This specifies a list of Python packages that should be installed in
your environment. Our requirements.txt example on GitHub shows a
typical requirements file.

*** apt.txt - Install packages with apt-get

A list of Debian packages that should be installed. The base image used is usually the latest released version of Ubuntu.

We use apt.txt, for example, to install LaTeX in our example apt.txt for LaTeX.

*** postBuild - Run code after installing the environment

A script that can contain arbitrary commands to be run after the whole repository has been built. If you want this to be a shell script, make sure the first line is #!/bin/bash.

Note that by default the build will not be stopped if an error occurs inside a shell script. You should include set -e or the equivalent at the start of the script to avoid errors being silently ignored.

An example use-case of postBuild file is JupyterLab‚Äôs demo on mybinder.org. It uses a postBuild file in a folder called binder to prepare their demo for binder.

*** Install Jupyter Kernel for Rust

Build issue for ~evcxr_jupyter~

#+BEGIN_EXAMPLE
    -- Build files have been written to: /tmp/cargo-installsPwqWa/release/build/zmq-sys-ea70069611a043cc/out/build
    running: "cmake" "--build" "." "--target" "install" "--config" "Release" "--parallel" "8"

    --- stderr
    CMake Warning:
      Manually-specified variables were not used by the project:

        CMAKE_ASM_COMPILER
        CMAKE_ASM_FLAGS


    Unknown argument --parallel
    Unknown argument 8
    Usage: cmake --build <dir> [options] [-- [native-options]]
    Options:
      <dir>          = Project binary directory to be built.
      --target <tgt> = Build <tgt> instead of default targets.
                       May only be specified once.
      --config <cfg> = For multi-configuration tools, choose <cfg>.
      --clean-first  = Build target 'clean' first, then build.
                       (To clean only, use --target 'clean'.)
      --use-stderr   = Ignored.  Behavior is default in CMake >= 3.0.
      --             = Pass remaining options to the native tool.
    thread 'main' panicked at '
    command did not execute successfully, got: exit status: 1

    build script failed, must exit now', /home/tilo/.cargo/registry/src/github.com-1ecc6299db9ec823/cmake-0.1.48/src/lib.rs:975:5
#+END_EXAMPLE

Turned out to be an incompatible ~cmake~ version.

On my host runs:
#+BEGIN_EXAMPLE
[tilo@holm play-jupyter]$ cmake --version
cmake version 3.22.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
#+END_EXAMPLE

On repo2docker's docker container with ~LABEL
repo2docker.version="2021.08.0"~ runs:
#+BEGIN_EXAMPLE
tilo@32644f4fde36:~$ cmake --version
cmake version 3.10.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).
#+END_EXAMPLE

Which shows the same error:
#+BEGIN_EXAMPLE
tilo@32644f4fde36:~$ cmake --build . --target install --config Release --parallel 8
Unknown argument --parallel
Unknown argument 8
Usage: cmake --build <dir> [options] [-- [native-options]]
Options:
  <dir>          = Project binary directory to be built.
  --target <tgt> = Build <tgt> instead of default targets.
                   May only be specified once.
  --config <cfg> = For multi-configuration tools, choose <cfg>.
  --clean-first  = Build target 'clean' first, then build.
                   (To clean only, use --target 'clean'.)
  --use-stderr   = Ignored.  Behavior is default in CMake >= 3.0.
  --             = Pass remaining options to the native tool.
#+END_EXAMPLE

Let's see if EValuation-ConteXt-for-Rust can help us:
https://github.com/google/evcxr/tree/main/binder.
I see 3 differences:
1. postBuild ~cargo install evcxr_jupyter --no-default-features~;
   Great I've got a step forward, flag ~--no-default-features~
   prevented us from running into the ~cmake~ issue.
   Next error brings us to next difference:
   #+BEGIN_EXAMPLE
      --- stderr
      thread 'main' panicked at 'Unable to locate libzmq:
      `"pkg-config" "--libs" "--cflags" "libzmq" "libzmq >= 4.1"` did not exit successfully: exit status: 1
      error: could not find system library 'libzmq' required by the 'zmq-sys' crate

      --- stderr
      Package libzmq was not found in the pkg-config search path.
      Perhaps you should add the directory containing `libzmq.pc'
      to the PKG_CONFIG_PATH environment variable
      No package 'libzmq' found
      Package libzmq was not found in the pkg-config search path.
      Perhaps you should add the directory containing `libzmq.pc'
      to the PKG_CONFIG_PATH environment variable
      No package 'libzmq' found
      ', /home/tilo/.cargo/registry/src/github.com-1ecc6299db9ec823/zmq-sys-0.11.0/build/pkg_config.rs:26:17
   #+END_EXAMPLE
2. apt package ~libzmq3-dev~;
   Great the jupyter-notebook is running and has ~evcxr_jupyter~.
   But there is no jupyter-kernel for rust but for ~Julia 1.7.2~ and
   for ~Python 3~. Rust-kernel needs to be installed as next difference:
3. postBuild ~evcxr_jupyter --install~;
   Expected error:
   #+BEGIN_EXAMPLE
     ...
        Compiling evcxr v0.12.0
        Compiling evcxr_jupyter v0.12.0
         Finished release [optimized] target(s) in 5m 30s
       Installing /home/tilo/.cargo/bin/evcxr_jupyter
        Installed package `evcxr_jupyter v0.12.0` (executable `evcxr_jupyter`)
     warning: be sure to add `/home/tilo/.cargo/bin` to your PATH to be able to run the installed binaries
     + evcxr_jupyter --install
     ./binder/postBuild: line 14: evcxr_jupyter: command not found
   #+END_EXAMPLE
   - Cargo's default directory [[https://doc.rust-lang.org/cargo/commands/cargo-install.html][to install packages]] into is not part of
     ~repo2docker~'s evironment variable ~PATH~.
     Let's look again into ~repo2docker~'s documentation:
   - [[https://repo2docker.readthedocs.io/en/2021.03.0/faq.html?highlight=path#can-i-add-executable-files-to-the-user-s-path][Can I add executable files to the user‚Äôs PATH?]]
     Yes! With a postBuild - Run code after installing the environment
     file, you can place any files that should be called from the
     command line in the folder =~/.local/=. This folder will be available
     in a user‚Äôs PATH, and can be run from the command line (or as a
     subsequent build step.)
   - postBuild ~cargo install --root $HOME/.local/~;
     An alternate solution should be to call
     ~$HOME/.cargo/bin/evcxr_jupyter --install~. 
     Great ~evcxr_jupyter~ has installed itself. But there is still no
     rust-kernel!? 
     #+BEGIN_EXAMPLE
       ...
          Compiling evcxr v0.12.0
          Compiling evcxr_jupyter v0.12.0
           Finished release [optimized] target(s) in 5m 17s
         Installing /home/tilo/.local/bin/evcxr_jupyter
          Installed package `evcxr_jupyter v0.12.0` (executable `evcxr_jupyter`)
       + evcxr_jupyter --install
       Writing /home/tilo/.local/share/jupyter/kernels/rust/kernel.json
       Writing /home/tilo/.local/share/jupyter/kernels/rust/logo-32x32.png
       Writing /home/tilo/.local/share/jupyter/kernels/rust/logo-64x64.png
       Writing /home/tilo/.local/share/jupyter/kernels/rust/logo-LICENSE.md
       Writing /home/tilo/.local/share/jupyter/kernels/rust/kernel.js
       Writing /home/tilo/.local/share/jupyter/kernels/rust/lint.js
       Writing /home/tilo/.local/share/jupyter/kernels/rust/lint.css
       Writing /home/tilo/.local/share/jupyter/kernels/rust/lint-LICENSE
       Writing /home/tilo/.local/share/jupyter/kernels/rust/version.txt
       Installation complete
       ...
     #+END_EXAMPLE
   - ~repo2docker~ installs jupyter-kernels in its environment
     variable:
     #+BEGIN_EXAMPLE
       tilo@fb6100782769:~$ env | sort
       APP_BASE=/srv
       CONDA_DEFAULT_ENV=/srv/conda/envs/notebook
       CONDA_DIR=/srv/conda
       DEBIAN_FRONTEND=noninteractive
       HOME=/home/tilo
       HOSTNAME=fb6100782769
       JULIA_DEPOT_PATH=/srv/julia/pkg
       JULIA_PATH=/srv/julia
       JULIA_PROJECT=/home/tilo
       JULIA_VERSION=1.7.2
       JUPYTER_DATA_DIR=/srv/conda/envs/notebook/share/jupyter
       JUPYTER=/srv/conda/envs/notebook/bin/jupyter
       KERNEL_PYTHON_PREFIX=/srv/conda/envs/notebook
       LANG=en_US.UTF-8
       LANGUAGE=en_US.UTF-8
       LC_ALL=en_US.UTF-8
       ...
       NB_ENVIRONMENT_FILE=/tmp/env/environment.lock
       NB_PYTHON_PREFIX=/srv/conda/envs/notebook
       NPM_CONFIG_GLOBALCONFIG=/srv/npm/npmrc
       NPM_DIR=/srv/npm
       PATH=/home/tilo/.local/bin:/home/tilo/.local/bin:/srv/conda/envs/notebook/bin:/srv/conda/bin:/srv/npm/bin:/srv/julia/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
       PWD=/home/tilo
       PYTHONUNBUFFERED=1
       REPO_DIR=/home/tilo
       SHELL=/bin/bash
       SHLVL=1
       TERM=xterm
       USER=tilo
       _=/usr/bin/env
     #+END_EXAMPLE
   - Let's try to set ~repo2docker~'s environment variable:
     #+BEGIN_EXAMPLE
       pipenv run jupyter-repo2docker --debug --env 'JUPYTER_DATA_DIR=$HOME/.local/' --env 'CARGO_INSTALL_ROOT=$HOME/.local/' .
     #+END_EXAMPLE
     No, ~JUPYTER_DATA_DIR~ isn't overwritten.
     See also [[https://docs.jupyter.org/en/latest/use/jupyter-directories.html][documentation of jupyter directories]]. 
     Furthermore it looks as if both environment variables are not
     available during build.
   - Let's try to set environment variable ~JUPYTER_PATH~ which is
     read by ~evcxr_jupyter~: https://github.com/google/evcxr/blob/5fe621b4e26b849c2873d7b39604a3a822a30e5d/evcxr_jupyter/src/install.rs#L93.
     Great, we got a rust kernel running.
     But the kernel dies:
     #+BEGIN_EXAMPLE
       [I 16:00:18.528 NotebookApp] Kernel started: 3bc47c2c-4683-4f0b-bc06-6f1a79ad4378, name: rust
       Error: Failed to find sysroot for Cargo.toml file /tmp/.tmp51kurL/Cargo.toml. Is rust-src installed?
     #+END_EXAMPLE
     Looks as if ~rust-src~ isn't installed, it is maybe no dependency
     of package ~cargo~: https://packages.ubuntu.com/bionic/cargo.
     Right, we need to put it in ~apt.txt~.
   - We are done :-)
     
*** repo2docker created Docker file

#+BEGIN_EXAMPLE
  [tilo@holm play-jupyter]$ pipenv run jupyter-repo2docker --no-build --debug .
  [Repo2Docker] Looking for repo2docker_config in /home/tilo/Projects/play-jupyter
  Picked Local content provider.
  Using local repo ..

  FROM buildpack-deps:bionic

  # Avoid prompts from apt
  ENV DEBIAN_FRONTEND=noninteractive

  # Set up locales properly
  RUN apt-get -qq update && \
      apt-get -qq install --yes --no-install-recommends locales > /dev/null && \
      apt-get -qq purge && \
      apt-get -qq clean && \
      rm -rf /var/lib/apt/lists/*

  RUN echo "en_US.UTF-8 UTF-8" > /etc/locale.gen && \
      locale-gen

  ENV LC_ALL en_US.UTF-8
  ENV LANG en_US.UTF-8
  ENV LANGUAGE en_US.UTF-8

  # Use bash as default shell, rather than sh
  ENV SHELL /bin/bash

  # Set up user
  ARG NB_USER
  ARG NB_UID
  ENV USER ${NB_USER}
  ENV HOME /home/${NB_USER}

  RUN groupadd \
          --gid ${NB_UID} \
          ${NB_USER} && \
      useradd \
          --comment "Default user" \
          --create-home \
          --gid ${NB_UID} \
          --no-log-init \
          --shell /bin/bash \
          --uid ${NB_UID} \
          ${NB_USER}

  RUN wget --quiet -O - https://deb.nodesource.com/gpgkey/nodesource.gpg.key |  apt-key add - && \
      DISTRO="bionic" && \
      echo "deb https://deb.nodesource.com/node_14.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list && \
      echo "deb-src https://deb.nodesource.com/node_14.x $DISTRO main" >> /etc/apt/sources.list.d/nodesource.list

  # Base package installs are not super interesting to users, so hide their outputs
  # If install fails for some reason, errors will still be printed
  RUN apt-get -qq update && \
      apt-get -qq install --yes --no-install-recommends \
         less \
         nodejs \
         unzip \
         > /dev/null && \
      apt-get -qq purge && \
      apt-get -qq clean && \
      rm -rf /var/lib/apt/lists/*

  EXPOSE 8888

  # Environment variables required for build
  ENV APP_BASE /srv
  ENV NPM_DIR ${APP_BASE}/npm
  ENV NPM_CONFIG_GLOBALCONFIG ${NPM_DIR}/npmrc
  ENV CONDA_DIR ${APP_BASE}/conda
  ENV NB_PYTHON_PREFIX ${CONDA_DIR}/envs/notebook
  ENV NB_ENVIRONMENT_FILE /tmp/env/environment.lock
  ENV KERNEL_PYTHON_PREFIX ${NB_PYTHON_PREFIX}
  ENV JULIA_PATH ${APP_BASE}/julia
  ENV JULIA_DEPOT_PATH ${JULIA_PATH}/pkg
  ENV JULIA_VERSION 1.7.2
  ENV JUPYTER ${NB_PYTHON_PREFIX}/bin/jupyter
  ENV JUPYTER_DATA_DIR ${NB_PYTHON_PREFIX}/share/jupyter
  # Special case PATH
  ENV PATH ${NB_PYTHON_PREFIX}/bin:${CONDA_DIR}/bin:${NPM_DIR}/bin:${JULIA_PATH}/bin:${PATH}
  # If scripts required during build are present, copy them

  COPY --chown=1000:1000 build_script_files/-2fhome-2ftilo-2f-2elocal-2fshare-2fvirtualenvs-2fplay-2djupyter-2d8vmfqbmi-2flib-2fpython3-2e10-2fsite-2dpackages-2frepo2docker-2fbuildpacks-2fconda-2factivate-2dconda-2esh-e590a4 /etc/profile.d/activate-conda.sh

  COPY --chown=1000:1000 build_script_files/-2fhome-2ftilo-2f-2elocal-2fshare-2fvirtualenvs-2fplay-2djupyter-2d8vmfqbmi-2flib-2fpython3-2e10-2fsite-2dpackages-2frepo2docker-2fbuildpacks-2fconda-2fenvironment-2epy-2d3-2e7-2elock-15abfc /tmp/env/environment.lock

  COPY --chown=1000:1000 build_script_files/-2fhome-2ftilo-2f-2elocal-2fshare-2fvirtualenvs-2fplay-2djupyter-2d8vmfqbmi-2flib-2fpython3-2e10-2fsite-2dpackages-2frepo2docker-2fbuildpacks-2fconda-2finstall-2dminiforge-2ebash-9b2e93 /tmp/install-miniforge.bash
  RUN mkdir -p ${NPM_DIR} && \
  chown -R ${NB_USER}:${NB_USER} ${NPM_DIR}

  USER ${NB_USER}
  RUN npm config --global set prefix ${NPM_DIR}

  USER root
  RUN TIMEFORMAT='time: %3R' \
  bash -c 'time /tmp/install-miniforge.bash' && \
  rm -rf /tmp/install-miniforge.bash /tmp/env

  RUN mkdir -p ${JULIA_PATH} && \
  curl -sSL "https://julialang-s3.julialang.org/bin/linux/x64/${JULIA_VERSION%[.-]*}/julia-${JULIA_VERSION}-linux-x86_64.tar.gz" | tar -xz -C ${JULIA_PATH} --strip-components 1

  RUN mkdir -p ${JULIA_DEPOT_PATH} && \
  chown ${NB_USER}:${NB_USER} ${JULIA_DEPOT_PATH}



  # Allow target path repo is cloned to be configurable
  ARG REPO_DIR=${HOME}
  ENV REPO_DIR ${REPO_DIR}
  WORKDIR ${REPO_DIR}
  RUN chown ${NB_USER}:${NB_USER} ${REPO_DIR}

  # We want to allow two things:
  #   1. If there's a .local/bin directory in the repo, things there
  #      should automatically be in path
  #   2. postBuild and users should be able to install things into ~/.local/bin
  #      and have them be automatically in path
  #
  # The XDG standard suggests ~/.local/bin as the path for local user-specific
  # installs. See https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
  ENV PATH ${HOME}/.local/bin:${REPO_DIR}/.local/bin:${PATH}

  # The rest of the environment
  ENV CONDA_DEFAULT_ENV ${KERNEL_PYTHON_PREFIX}
  ENV JULIA_PROJECT ${REPO_DIR}
  # Run pre-assemble scripts! These are instructions that depend on the content
  # of the repository but don't access any files in the repository. By executing
  # them before copying the repository itself we can cache these steps. For
  # example installing APT packages.
  # If scripts required during build are present, copy them

  COPY --chown=1000:1000 src/binder/requirements.txt ${REPO_DIR}/binder/requirements.txt
  RUN apt-get -qq update && \
  apt-get install --yes --no-install-recommends cargo cmake libzmq3-dev rust-src && \
  apt-get -qq purge && \
  apt-get -qq clean && \
  rm -rf /var/lib/apt/lists/*

  USER ${NB_USER}
  RUN ${KERNEL_PYTHON_PREFIX}/bin/pip install --no-cache-dir -r "binder/requirements.txt"


  # Copy stuff.
  COPY --chown=1000:1000 src/ ${REPO_DIR}

  # Run assemble scripts! These will actually turn the specification
  # in the repository into an image.
  USER ${NB_USER}
  RUN JULIA_PROJECT="" julia -e "using Pkg; Pkg.add(\"IJulia\"); using IJulia; installkernel(\"Julia\", \"--project=${REPO_DIR}\");" && \
  julia --project=${REPO_DIR} -e 'using Pkg; Pkg.instantiate(); Pkg.resolve(); pkg"precompile"'



  # Container image Labels!
  # Put these at the end, since we don't want to rebuild everything
  # when these change! Did I mention I hate Dockerfile cache semantics?

  LABEL repo2docker.ref="None"
  LABEL repo2docker.repo="local"
  LABEL repo2docker.version="2021.08.0"

  # We always want containers to run as non-root
  USER ${NB_USER}

  # Make sure that postBuild scripts are marked executable before executing them
  RUN chmod +x binder/postBuild
  RUN ./binder/postBuild

  # Add start script
  # Add entrypoint
  ENV PYTHONUNBUFFERED=1
  COPY /python3-login /usr/local/bin/python3-login
  COPY /repo2docker-entrypoint /usr/local/bin/repo2docker-entrypoint
  ENTRYPOINT ["/usr/local/bin/repo2docker-entrypoint"]

  # Specify the default command to run
  CMD ["jupyter", "notebook", "--ip", "0.0.0.0"]

#+END_EXAMPLE

*** Run on Binder

    [[https://mybinder.org/v2/gh/tilofix/play-jupyter/master][Klick to execute Jupyter-Notebook on myBinder]]
    [[http://mybinder.org/badge.svg]]

** Off-topic: Install Docker on Manjaro, required by jupyter-repo2docker

It hasn't been sufficient to ~pamac install docker~.
Package ~docker~ together with dependencies like ~containerd~ had been installed
but ~docker.service~ did neither run nor had been started during start-up.
[[LinuxConfig.org][https://linuxconfig.org/manjaro-linux-docker-installation]] 
had an answer for me:
- with a ~sudoer~ account execute following commands:
  - =sudo systemctl start docker.service=
  - =sudo systemctl enable docker.service=
- and with a ~sudoer~ account make users planned to execute ~docker~
  a member of group ~docker~: =sudo usermod --append --group docker tilo=,
  and relogin.

** Off-topic: Learning GIT by doing "[[https://alexwlchan.net/a-plumbers-guide-to-git/][A Plumber‚Äôs Guide to Git]]" and "man git-push"

Note: this would be better belong to repository =play-git=,
but I wasn't not able to reproduce the same situation having two
different root-commits create by ~GitHub~ remotely, and locally by ~git
init~. And but the example hashes of ~commit~ and ~tree~ objects
belong to this repo.

I initialized the local git repository and did 2 commits
?and created a repository on Adtran's github and did 1 commit.
After I tried to synchronize my local with remote repository 
I ended up in an fatal error:

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git pull adtran 
  warning: keine gemeinsamen Commits
  remote: Enumerating objects: 3, done.        
  remote: Counting objects: 100% (3/3), done.        
  remote: Compressing objects: 100% (2/2), done.        
  remote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0        
  Entpacke Objekte: 100% (3/3), Fertig.
  Von github.adtran.com:twirkner/play-jupyter
   ,* [neuer Branch]    master     -> adtran/master
  Sie f√ºhrten "pull" von Remote-Repository 'adtran' aus, ohne einen
  Branch anzugeben. Da das nicht das konfigurierte Standard-Remote-
  Repository f√ºr den aktuellen Branch ist, m√ºssen Sie einen Branch auf
  der Befehlszeile angeben.
  56S8TZ1[play-jupyter]$ git pull adtran master
  Von github.adtran.com:twirkner/play-jupyter
   ,* branch            master     -> FETCH_HEAD
  fatal: Verweigere den Merge von nicht zusammenh√§ngenden Historien.
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git push adtran master
  To github.adtran.com:twirkner/play-jupyter.git
   ! [rejected]        master -> master (non-fast-forward)
  error: Fehler beim Versenden einiger Referenzen nach 'git@github.adtran.com:twirkner/play-jupyter.git'
  Hinweis: Aktualisierungen wurden zur√ºckgewiesen, weil die Spitze Ihres aktuellen
  Hinweis: Branches hinter seinem externen Gegenst√ºck zur√ºckgefallen ist. F√ºhren Sie
  Hinweis: die externen √Ñnderungen zusammen (z. B. 'git pull ...') bevor Sie "push"
  Hinweis: erneut ausf√ºhren.
  Hinweis: Siehe auch die Sektion 'Note about fast-forwards' in 'git push --help'
  Hinweis: f√ºr weitere Details.
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

My two ~git init~ calls - one on github - lead to two root commits
being ~6a0fc90~ as well as ~ec32c54~:
- refs
  - =$ cat .git/refs/heads/master= 
    c49dbd12c30126fd711390f1b8dd8ee712a78b34
  - =$ cat .git/refs/remotes/adtran/master=
    ec32c5429d67e71de38cebcd720f23e6aae199e8
- commit objects
  - (is a root commit, has not parent) =$ git cat-file -p 6a0fc90cf9c5152cfb452a42f9bb3efc9dae9176=
    - tree c7bfd0fc492f13509954a5018e701ccf4783e90e
      - =$ git cat-file -p c7bfd0fc492f13509954a5018e701ccf4783e90e=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 561b881505065ada9f3124bb4268232bcf336c19	python3_notes.ipynb
          #+END_EXAMPLE
    - author Tilo Wirkner <tilo.wirkner@adtran.com> 1553258993 +0100
    - committer Tilo Wirkner <tilo.wirkner@adtran.com> 1553258993 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Initial commit of new project
        
        Playground to learn and understand Jupyter Notebooks
      #+END_EXAMPLE
  - =$ git cat-file -p c49dbd12c30126fd711390f1b8dd8ee712a78b34=
    - tree d449f244dae6c29f26704dfb6098e3d4ea6e3112
      - =$ git cat-file -p d449f244dae6c29f26704dfb6098e3d4ea6e3112=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 894a44cc066a027465cd26d634948d56d13af9af	.gitignore
            100644 blob 2530266a36a8b2e18003b65797cee0f9c4bd60bb	Pipfile
            100644 blob 55eb3e5fdeeb609a0848da7975b26ac1a86a6bd7	Pipfile.lock
            100644 blob ac93b4b55546e714ab1feb414e4e14d5bb2e488a	README.org
            100644 blob 561b881505065ada9f3124bb4268232bcf336c19	python3_notes.ipynb
            100644 blob cee5e58443d3bd60769a48d731921ed50adb581c	python_tricks.ipynb
            100644 blob 3224ceb843bc7c13269b27d228cfb94aa978a70c	requirements.txt
            100644 blob 7ecbe2956dc100d3b29bcabe84f6702ae55fcd72	textfile.txt
          #+END_EXAMPLE
    - parent 6a0fc90cf9c5152cfb452a42f9bb3efc9dae9176
    - author Tilo Wirkner <tilo.wirkner@adtran.com> 1553259039 +0100
    - committer Tilo Wirkner <tilo.wirkner@adtran.com> 1553259039 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Supplement to the initial commit - missed to mark all files :-O
      #+END_EXAMPLE
  - (is a root commit, has not parent) =$ git cat-file -p ec32c5429d67e71de38cebcd720f23e6aae199e8=
    - tree 90a01769a94b92239d70f8d1fe46eea48d3aa446
      - =$ git cat-file -p 90a01769a94b92239d70f8d1fe46eea48d3aa446=
        - tree objects
          #+BEGIN_EXAMPLE
            100644 blob 894a44cc066a027465cd26d634948d56d13af9af	.gitignore
          #+END_EXAMPLE
    - author TILO WIRKNER <TILO.WIRKNER@adtran.com> 1553257717 +0100
    - committer GitHub Enterprise <github-noreply@adtran.com> 1553257717 +0100
    - log message 
      #+BEGIN_EXAMPLE
        Initial commit
      #+END_EXAMPLE

The issue is explained in "NOTE ABOUT FAST-FORWARDS" 
in manual page of [[https://manpages.debian.org/bullseye/git-man/git-push.1.en.html][git-push]].

#+BEGIN_EXAMPLE
  In contrast, a non-fast-forward update will lose history. For example, suppose you and somebody else
  started at the same commit X, and you built a history leading to commit B while the other person built a
  history leading to commit A. The history looks like this:

            B
           /
       ---X---A

  Further suppose that the other person already pushed changes leading to A back to the original repository
  from which you two obtained the original commit X.

  The push done by the other person updated the branch that used to point at commit X to point at commit A.
  It is a fast-forward.

  But if you try to push, you will attempt to update the branch (that now points at A) with commit B. This
  does not fast-forward. If you did so, the changes introduced by commit A will be lost, because everybody
  will now start building on top of B.

  The command by default does not allow an update that is not a fast-forward to prevent such loss of
  history.

  If you do not want to lose your work (history from X to B) or the work by the other person (history from
  X to A), you would need to first fetch the history from the repository, create a history that contains
  changes done by both parties, and push the result back.

  You can perform "git pull", resolve potential conflicts, and "git push" the result. A "git pull" will
  create a merge commit C between commits A and B.

            B---C
           /   /
       ---X---A

  Updating A with the resulting merge commit will fast-forward and your push will be accepted.

  Alternatively, you can rebase your change between X and B on top of A, with "git pull --rebase", and push
  the result back. The rebase will create a new commit D that builds the change between X and B on top of
  A.

            B   D
           /   /
       ---X---A

  Again, updating A with this commit will fast-forward and your push will be accepted.
#+END_EXAMPLE

Ok, let's go ... Upps

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git pull --rebase adtran master
  error: Pull mit Rebase nicht m√∂glich: Sie haben √Ñnderungen, die nicht zum Commit vorgemerkt sind.
  error: Bitte committen Sie die √Ñnderungen oder benutzen Sie "stash".
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git status
  Auf Branch master
  √Ñnderungen, die nicht zum Commit vorgemerkt sind:
    (benutzen Sie "git add <Datei>...", um die √Ñnderungen zum Commit vorzumerken)
    (benutzen Sie "git checkout -- <Datei>...", um die √Ñnderungen im Arbeitsverzeichnis zu verwerfen)

          ge√§ndert:       README.org

  keine √Ñnderungen zum Commit vorgemerkt (benutzen Sie "git add" und/oder "git commit -a")
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

I changed the file I writing in ... let's stash it away and do the rebase. 

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git stash push
  Saved working directory and index state WIP on master: c49dbd1 Supplement to the initial commit - missed to mark all files :-O
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$git pull --rebase adtran master
  Von github.adtran.com:twirkner/play-jupyter
   ,* branch            master     -> FETCH_HEAD
  First, rewinding head to replay your work on top of it...
  Wende an: Initial commit of new project
  Wende an: Supplement to the initial commit - missed to mark all files :-O
  Verwende Informationen aus der Staging-Area, um ein Basisverzeichnis nachzustellen ...
  .git/rebase-apply/patch:537: trailing whitespace.
  and remembered IPython and its Notebook facility 
  .git/rebase-apply/patch:540: trailing whitespace.
  In meantime all python language-agnostic components 
  .git/rebase-apply/patch:543: trailing whitespace.
  "IPython 3.x was the last monolithic release of IPython, 
  .git/rebase-apply/patch:544: trailing whitespace.
  containing the notebook server, qtconsole, etc. 
  .git/rebase-apply/patch:545: trailing whitespace.
  As of IPython 4.0, the language-agnostic parts of the project: 
  warning: unterdr√ºckte 18 Whitespace-Fehler
  warning: 23 Zeilen f√ºgen Whitespace-Fehler hinzu.
  Falle zur√ºck zum Patchen der Basis und zum 3-Wege-Merge ...
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git status
  Auf Branch master
  nichts zu committen, Arbeitsverzeichnis unver√§ndert
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git push adtran master
  Z√§hle Objekte: 11, Fertig.
  Delta compression using up to 4 threads.
  Komprimiere Objekte: 100% (10/10), Fertig.
  Schreibe Objekte: 100% (11/11), 10.99 KiB | 2.75 MiB/s, Fertig.
  Total 11 (delta 0), reused 0 (delta 0)
  To github.adtran.com:twirkner/play-jupyter.git
     ec32c54..c88be29  master -> master
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git stash pop
  Auf Branch master
  √Ñnderungen, die nicht zum Commit vorgemerkt sind:
    (benutzen Sie "git add <Datei>...", um die √Ñnderungen zum Commit vorzumerken)
    (benutzen Sie "git checkout -- <Datei>...", um die √Ñnderungen im Arbeitsverzeichnis zu verwerfen)

          ge√§ndert:       README.org

  keine √Ñnderungen zum Commit vorgemerkt (benutzen Sie "git add" und/oder "git commit -a")
  Dropped refs/stash@{0} (8f8e986c4285eb21374246e4327c2a5ccbef91fc)
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

OK, we are back on track :-).

*** Post Scriptum for Learning GIT by doing "[[https://alexwlchan.net/a-plumbers-guide-to-git/][A Plumber‚Äôs Guide to Git]]" 

The plumber's guide did not explain why I get different hash values 
when ~git~ creates SHA1 value and when ~sha1sum~ creates SHA1.

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ git hash-object python3_notes.ipynb 
  561b881505065ada9f3124bb4268232bcf336c19
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ sha1sum.exe python3_notes.ipynb 
  edcbcd188a8e3bd1e18e125d79670fbbcf02e1bf *python3_notes.ipynb
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

I found answer in this stackoverflow thread:
[[https://stackoverflow.com/questions/5290444/why-does-git-hash-object-return-a-different-hash-than-openssl-sha1#5290484][Why does git hash-object return a different hash than openssl sha1?]]

You see a difference because git hash-object doesn't just take a hash of the bytes in the file - 
it prepends the string "blob " followed by the file size and a NUL to the file's contents before hashing. 
There are more details in this other answer on Stack Overflow:
[[https://stackoverflow.com/questions/552659/how-to-assign-a-git-sha1s-to-a-file-without-git/552725#552725][How to assign a Git SHA1's to a file without Git?]]

Let's verify with help of ~stat~ to get size of the file in question.

#+BEGIN_EXAMPLE
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ stat --format %s python3_notes.ipynb 
  4634
  56S8TZ1[play-jupyter]$ 
  56S8TZ1[play-jupyter]$ printf 'blob 4634\0' | cat - python3_notes.ipynb | sha1sum.exe -
  561b881505065ada9f3124bb4268232bcf336c19 *-
  56S8TZ1[play-jupyter]$ 
#+END_EXAMPLE

So ~git~ prepends a type/length field to the data it has to hash.

Finally, let's check where this plumbing technique is documented.

Yes, it is documented in "Pro Git" book's chapter [[https://git-scm.com/book/en/v2/Git-Internals-Git-Objects][10.2 Git Objects]]
under headline "Object Storage" at the end: 
"... there is a header stored with every object you commit to your Git object database."
"... Git first constructs a header which starts by identifying the type of object‚Äâ... 
To that first part of the header, Git adds a space followed by the size in bytes of the content, 
and adding a final null byte".


