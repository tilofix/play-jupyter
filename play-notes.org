# -*- coding: utf-8-unix -*-
#+TITLE: Playnotes learning Jupyter Notebooks

** Install Jupyter Notebook with Pipenv

[[https://pipenv.readthedocs.io/en/latest/][Pipenv]]: Python Dev Workflow for Humans

Pipenv is a tool that aims to bring the best of all packaging worlds 
(bundler, composer, npm, cargo, yarn, etc.) to the Python world. 
Windows is a first-class citizen, in our world.

It automatically creates and manages a virtualenv for your projects, 
as well as adds/removes packages from your Pipfile as you install/uninstall packages. 
It also generates the ever-important Pipfile.lock, 
which is used to produce deterministic builds.

Importing from requirements.txt

If you only have a requirements.txt file available when running pipenv install, 
pipenv will automatically import the contents of this file and create a Pipfile for you.

You can also specify =$ pipenv install -r path/to/requirements.txt= to import a requirements file.

Pipenv Workflow
- Clone / create project repository:
  =$ cd play-jupyter=
- Install from Pipfile, if there is one 
  or will create a Pipfile if one doesn‚Äôt exist 
  (or pipenv will automatically import the contents of requirements.txt):
  =pipenv install --three=
- Or, add a package to your new project:
  =$ pipenv install <package>=
- Next, activate the Pipenv shell:
  =$ pipenv shell=

#+BEGIN_EXAMPLE
  pipenv install --three
  pipenv run pip list
#+END_EXAMPLE

Let's see how PIP 

#+BEGIN_SRC shell :tangle no
  pipenv --where
  pipenv --venv
  pipenv --py
#+END_SRC 

** Run a Jupyter Notebook with Pipenv

Run a Jupyter notebook and open displayed URL in browser 
(does not open automatically as we are running cygwin). 

#+BEGIN_EXAMPLE
  pipenv run jupyter-notebook
#+END_EXAMPLE

As long as shell is controlled by Emacs you may open 
the displayed URL by mark the URL and type M+x '[[help:browse-url][browse-url]]'.

** Install Jupyter (Qt)Console with Pipenv

Even though jupyter-console seems to be installed with jupyter,
I could neither start ~jupyter console~ nor ~jupyter qtconsole~:
#+BEGIN_EXAMPLE
[tilo@holm play-jupyter]$ 
[tilo@holm play-jupyter]$ pipenv run jupyter console
Jupyter console 6.4.0

Python 3.10.1 (main, Dec 18 2021, 23:53:45) [GCC 11.1.0]
Type 'copyright', 'credits' or 'license' for more information
IPython 8.0.1 -- An enhanced Interactive Python. Type '?' for help.
Traceback (most recent call last):
  File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/bin/jupyter-console", line 8, in <module>
    sys.exit(main())
...
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/jupyter_console/ptshell.py", line 664, in mainloop
    main_task = asyncio.wait(tasks, loop=loop, return_when=asyncio.FIRST_COMPLETED)
TypeError: wait() got an unexpected keyword argument 'loop'
sys:1: RuntimeWarning: coroutine 'ZMQTerminalInteractiveShell.interact' was never awaited
[tilo@holm play-jupyter]$ 
#+END_EXAMPLE

Even not after installed ~qtconsole~:
#+BEGIN_EXAMPLE
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ pipenv install qtconsole
  Installing qtconsole...
  Adding qtconsole to Pipfile's [packages]...
  ‚úî Installation Succeeded 
  Pipfile.lock (5509dc) out of date, updating to (3b5bc9)...
  Locking [dev-packages] dependencies...
  Locking [packages] dependencies...
  Building requirements...
  Resolving dependencies...
  ‚úî Success! 
  Updated Pipfile.lock (3b5bc9)!
  Installing dependencies from Pipfile.lock (3b5bc9)...
    üêç   ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ‚ñâ 0/0 ‚Äî 00:00:00
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ 
  [tilo@holm play-jupyter]$ pipenv run jupyter qtconsole
  Traceback (most recent call last):
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/bin/jupyter-qtconsole", line 5, in <module>
      from qtconsole.qtconsoleapp import main
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/qtconsole/qtconsoleapp.py", line 61, in <module>
      from qtpy import QtCore, QtGui, QtWidgets, QT_VERSION
    File "/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/qtpy/QtCore.py", line 42, in <module>
      from PyQt5.QtCore import *
  ModuleNotFoundError: No module named 'PyQt5'
  [tilo@holm play-jupyter]$ 
#+END_EXAMPLE

It has been required to install ~PyQt5~ manually.
#+BEGIN_EXAMPLE
  pipenv install PyQt5
#+END_EXAMPLE

** Run a Jupyter QtConsole with Pipenv

Run a Jupyter QtConsole opens a Qt-Terminal window with
good old IPython :-), or may be not the same; see my by-the-way below
on editing cells, not only when a line has a double colon.

#+BEGIN_EXAMPLE
  pipenv run jupyter qtconsole
#+END_EXAMPLE

By-The-Way: it took some hours to find the right keyboard combination
to start editing a ~cell~ rather than a ~line~
(similar to "magic" ~%<line>~ or ~%%<cell>~).
I was not able to edit more then one line when the python code has no
~:~ in a =ipython= installation of my system.

Only after I installed ~jupyter qtconsole~ I found =CTRL+ENTER= to
get start editing the next line instead of evaluate the current line.

#+BEGIN_EXAMPLE
  In [44]: cwd = !pwd          <-- TILO: Ctrl+Enter
      ...: !ls -la $cwd        <-- TILO: Enter
  ls: Zugriff auf '[/home/tilo/Projects/play-jupyter]' nicht m√∂glich: Datei oder Verzeichnis nicht gefunden

  In [45]: cwd?
  Type:        SList
  String form: ['/home/tilo/Projects/play-jupyter']
  Length:      1
  File:        ~/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/IPython/utils/text.py
  Docstring:  
  List derivative with a special access attributes.

  These are normal lists, but with the special attributes:

  ,* .l (or .list) : value as list (the list itself).
  ,* .n (or .nlstr): value as a string, joined on newlines.
  ,* .s (or .spstr): value as a string, joined on spaces.
  ,* .p (or .paths): list of path objects (requires path.py package)

  Any values which require transformations are computed only once and
  cached.

  In [46]: cwd = !pwd
      ...: !ls -la $cwd.spstr
  insgesamt 240
  drwxr-xr-x  4 tilo tilo  4096 29. Jan 16:41  .
  drwxr-xr-x 12 tilo tilo  4096 14. Jan 17:02  ..
  drwxr-xr-x  8 tilo tilo  4096 29. Jan 16:38  .git
  -rw-r--r--  1 tilo tilo  1223 12. Dez 2020   .gitignore
  drwxr-xr-x  2 tilo tilo  4096  4. Jan 2021   .ipynb_checkpoints
  -rw-r--r--  1 tilo tilo 96119 23. Jan 20:52  julia_notes.ipynb
  -rw-r--r--  1 tilo tilo   211 29. Jan 16:15  Pipfile
  -rw-r--r--  1 tilo tilo 49702 29. Jan 16:15  Pipfile.lock
  -rw-r--r--  1 tilo tilo  4995 23. Jan 20:17  python3_notes.ipynb
  -rw-r--r--  1 tilo tilo  8109 29. Jan 07:50  python_tricks.ipynb
  -rw-r--r--  1 tilo tilo 20372 29. Jan 16:41 '#README.org#'
  lrwxrwxrwx  1 tilo tilo    25 29. Jan 16:40  .#README.org -> tilo@holm.4452:1643453754
  -rw-r--r--  1 tilo tilo 20323 29. Jan 16:38  README.org
  -rw-r--r--  1 tilo tilo   489 12. Dez 2020   requirements.txt
  -rw-r--r--  1 tilo tilo  2187  4. Jan 2021   rust_notes.ipynb
  -rw-r--r--  1 tilo tilo    27 12. Dez 2020   textfile.txt

#+END_EXAMPLE

Interesting to learn more on that IPython type ~SList~.
First is says it is like a normal list but I cannot deference it's item.

#+BEGIN_EXAMPLE
  In [58]: cwd = !pwd
      ...: !ls -la $cwd[0]
  ls: Zugriff auf '[/home/tilo/Projects/play-jupyter][0]' nicht m√∂glich: Datei oder Verzeichnis nicht gefunden

#+END_EXAMPLE

The [[https://ipython.readthedocs.io/en/stable/interactive/reference.html#system-shell-access][IPython reference]] helps in chapter "Interactive use" when it talks
about "System shell access". 

-----

IPython also allows you to expand the value of python variables when
making system calls.

Wrap variables or expressions in ~{~braces~}~:
#+BEGIN_EXAMPLE
  In [60]: pyvar = 'Hello Jupyter'
      ...: !echo "A python variable: {pyvar}"
  A python variable: Hello Jupyter

  In [61]: import math
      ...: x = 8
      ...: !echo {math.factorial(x)}
  40320

#+END_EXAMPlE

For simple cases, you can alternatively prepend ~$~ to a variable name:

#+BEGIN_EXAMPLE
  In [64]: import sys
      ...: !echo $sys.argv
  [/home/tilo/.local/share/virtualenvs/play-jupyter-8vMFQbMi/lib/python3.10/site-packages/ipykernel_launcher.py, -f, /home/tilo/.local/share/jupyter/runtime/kernel-6328.json]

  In [65]: !echo "A system variable: $$HOME" # Use $$ for literal $
  A system variable: /home/tilo

#+END_EXAMPlE

-----

OK, got it. Here were with my own example:
#+BEGIN_EXAMPLE
  In [56]: dir_list = ["..","."]
      ...: !ls -l {dir_list[1]}
  insgesamt 204
  -rw-r--r-- 1 tilo tilo 96119 23. Jan 20:52 julia_notes.ipynb
  -rw-r--r-- 1 tilo tilo   211 29. Jan 16:15 Pipfile
  -rw-r--r-- 1 tilo tilo 49702 29. Jan 16:15 Pipfile.lock
  -rw-r--r-- 1 tilo tilo  4995 23. Jan 20:17 python3_notes.ipynb
  -rw-r--r-- 1 tilo tilo  8109 29. Jan 07:50 python_tricks.ipynb
  -rw-r--r-- 1 tilo tilo 22539 29. Jan 17:04 README.org
  -rw-r--r-- 1 tilo tilo   489 12. Dez 2020  requirements.txt
  -rw-r--r-- 1 tilo tilo  2187  4. Jan 2021  rust_notes.ipynb
  -rw-r--r-- 1 tilo tilo    27 12. Dez 2020  textfile.txt

#+END_EXAMPLE

** Jupyter and Emacs Org Mode

There are two emacs packages worth visiting:
- EIN :: "The Emacs IPython Notebook (EIN) package provides a Jupyter
  Notebook client and integrated REPL (like SLIME) in Emacs."
  Documentation: http://millejoh.github.io/emacs-ipython-notebook/
- emacs-jupyter :: "Provides REPL and ~org-mode~ source block
  frontends to Jupyter kernels."


